---
description: 
globs: 
alwaysApply: false
---
---
description: "Guide the creation of new UI components as reusable, data-driven sections using React and Tailwind CSS, including standard internationalization."
patterns: ["src/components/**/*.tsx", "src/app/**/*.tsx"] # Apply to components and potentially page sections
---

# Reusable Data-Driven UI Sections

When tasked with creating new UI components, especially those representing distinct sections of a webpage (like heroes, feature lists, grids, CTAs, etc.), please adhere to the following principles:

1.  **Build as React Functional Components:** Use standard React functional component syntax (`export default function MySectionComponent(...)`).

2.  **Data-Driven via Props:**
    *   **Crucially, design components to accept props for *all* dynamic content.** This includes text (titles, descriptions, labels), lists of items, image sources and alt text, button text, button links or actions, configuration options (like layout variations), etc.
    *   **Standard Props:** Aim to use the following standard props where applicable:
        *   `i18nBaseKey: string` (Required for i18n)
        *   `tag?: string | null` (Optional tag/badge text)
        *   `title: string` (Required section title)
        *   `description?: string | null` (Optional section description)
        *   `items: Array<any>` (Required list of items, specific structure varies)
        *   `image?: { lightSrc: string; darkSrc?: string; alt: string; position?: 'left' | 'right' }` (Optional image object)
        *   Other props specific to the component's functionality (e.g., button actions, layout variations).
    *   Define clear TypeScript interfaces for the component's props (e.g., `interface MySectionProps { ... }`).
    *   **Avoid hardcoding content directly in the JSX.** The component should render data passed to it, not contain the data itself. See the i18n section below for how text props serve as defaults/fallbacks.

3.  **Represent Self-Contained Sections:** Ensure the component encapsulates the necessary structure, styling, and potentially minimal client-side logic for its specific UI block.

4.  **Use Tailwind CSS:** Apply styling using Tailwind utility classes for consistency with the project's styling approach.

5.  **Leverage Existing UI Primitives:** Utilize shared components, particularly those from `shadcn/ui` found in `@/components/ui` (e.g., `Button`, `Card`, `Carousel`) where appropriate, following the `shadcn-ui.mdc` rule.

6.  **Standardize Common Styles:**
    *   **Container:** Sections should **not** define their own top-level container width or padding (`container`, `mx-auto`, `max-w-*`, `px-*`). Instead, they should be designed to render within a parent container that sets these properties (e.g., the `<Container>` component in `src/components/common/Container.tsx` which uses `container mx-auto px-4 md:px-6 2xl:max-w-[1400px]`).
    *   **Headings:**
        *   For primary page/hero titles (typically `<h1>`): Use `text-4xl lg:text-5xl font-extrabold tracking-tight`.
        *   For standard section titles (typically `<h2>`): Use `text-3xl sm:text-4xl font-bold tracking-tight`.

7.  **Implement Standard i18n:** Follow the internationalization pattern detailed below.

8.  **Aim for Reusability:** Structure the component so it could potentially be reused on different pages or in different contexts with different data conforming to its prop interface.

# Internationalization (i18n) Standard Pattern

Reusable section components must follow a standard pattern for internationalization to ensure consistency and leverage default/fallback content defined in `src/data/pageSections.json`.

## Core Concepts

1.  **`i18nBaseKey` Prop:** Each reusable section component **must** accept an `i18nBaseKey` prop (string). This key points to the root object for that section's translations in `messages/[locale].json`.
2.  **`getTranslation` Helper:** Use the `getTranslation` helper function (from `@/lib/i18nUtils`) along with the `useTranslations` hook from `next-intl`.
3.  **Default Values:** The component should accept props for display text (e.g., `tag`, `title`, `description`, `image.alt`, item titles/descriptions) directly from `pageSections.json`. These values serve as the **default/fallback** text if a translation is missing.
4.  **Key Generation:**
    *   For top-level section properties (like `tag`, `title`, `description`, `image.alt`), generate the translation key by appending the property name to the base key (e.g., `${i18nBaseKey}.title`, `${i18nBaseKey}.image.alt`).
    *   For properties within iterated items (like features in a list, icons, etc.), generate the translation key using the **item's index** within the loop (e.g., `${i18nBaseKey}.items.${index}.title`).

## Conceptual Example (Integrating i18n)

This example uses a `CallToActionSection` to illustrate the standard i18n pattern with the standardized props.

### Component (`src/components/sections/CallToActionSection.tsx`)

```typescript
import { Button } from "@/components/ui/button";
import Image from 'next/image'; // For the image
import { useTranslations } from 'next-intl'; // Import i18n hook
import { getTranslation } from '@/lib/i18nUtils'; // Import i18n helper

// Define the shape of the data the component expects
interface ButtonData {
  text: string;   // Default text
  action: string;
}

interface ImageProps {
  lightSrc: string;
  darkSrc?: string;
  alt: string;
  position?: 'left' | 'right';
}

interface CallToActionProps {
  i18nBaseKey: string;          // Required: Base key for translations
  tag?: string | null;         // Optional: Tag/badge text
  title: string;              // Required: Default title
  description?: string | null; // Optional: Default description
  image?: ImageProps;         // Optional: Image object
  primaryButton: ButtonData;
  secondaryButton?: ButtonData;
}

// The component receives data via props and uses i18n
export default function CallToActionSection({
  i18nBaseKey,
  tag: defaultTag,
  title: defaultTitle,
  description: defaultDescription,
  image,
  primaryButton,
  secondaryButton
}: CallToActionProps) {
  const t = useTranslations(); // Initialize i18n hook

  // Translate text props using the base key and defaults
  const tag = i18nBaseKey && defaultTag ? getTranslation(t, `${i18nBaseKey}.tag`, defaultTag) : defaultTag;
  const title = i18nBaseKey ? getTranslation(t, `${i18nBaseKey}.title`, defaultTitle) : defaultTitle;
  const description = i18nBaseKey && defaultDescription ? getTranslation(t, `${i18nBaseKey}.description`, defaultDescription) : defaultDescription;
  const imageAlt = image && i18nBaseKey ? getTranslation(t, `${i18nBaseKey}.image.alt`, image.alt) : image?.alt ?? ''; // Translate alt from image object
  const primaryButtonText = i18nBaseKey ? getTranslation(t, `${i18nBaseKey}.primaryButton.text`, primaryButton.text) : primaryButton.text;
  const secondaryButtonText = secondaryButton
    ? (i18nBaseKey ? getTranslation(t, `${i18nBaseKey}.secondaryButton.text`, secondaryButton.text) : secondaryButton.text)
    : undefined;

  // Determine image sources from the image object
  const lightImage = image?.lightSrc;
  const darkImage = image?.darkSrc || lightImage; // Fallback dark to light

  // ... component implementation using translated props ...
  return (
    <section className="bg-muted p-8 rounded-lg">
      {tag && <span className="badge">{tag}</span>} {/* Example usage of tag */}
      <h2>{title}</h2>
      {description && <p>{description}</p>}
      {/* Example image rendering */}
      {image && (
        <div className="relative h-64 w-full">
          {darkImage && <Image src={darkImage} alt={imageAlt} fill className="hidden object-cover dark:block" />}
          {lightImage && <Image src={lightImage} alt={imageAlt} fill className="block object-cover dark:hidden" />}
        </div>
      )}
      <div className="flex gap-4 mt-4">
        <Button onClick={() => handleAction(primaryButton.action)}>
          {primaryButtonText}
        </Button>
        {secondaryButton && secondaryButtonText && (
          <Button variant="outline" onClick={() => handleAction(secondaryButton.action)}>
            {secondaryButtonText}
          </Button>
        )}
      </div>
    </section>
  );

  function handleAction(action: string) {
    // Logic to handle button click based on action (e.g., navigate, trigger event)
    console.log("Action triggered:", action);
    if (action.startsWith('/')) {
       window.location.href = action;
    }
  }
}
```

### Translations (`messages/en.json` - Example Structure)

```json
{
  "somePage": {
    "ctaSection": {
      "tag": "Optional Tag (Translated)",
      "title": "Call to Action (Translated)",
      "description": "This is the translated description.",
      "image": {
         "alt": "Translated alt text for the image."
      },
      "primaryButton": {
        "text": "Get Started Now"
      },
      "secondaryButton": {
        "text": "Learn More Here"
      }
    }
  }
}
```

### Data (`src/data/pageSections.json` - Example Structure)

```json
{
  "component": "CallToActionSection",
  "props": {
    "i18nBaseKey": "somePage.ctaSection",
    "tag": "Default Tag",
    "title": "Default CTA Title",
    "description": "Default description for the CTA.",
    "image": {
      "lightSrc": "/images/cta-light.jpg",
      "darkSrc": "/images/cta-dark.jpg",
      "alt": "Default alt text for CTA image"
    },
    "primaryButton": {
      "text": "Default Get Started",
      "action": "/signup"
    },
    "secondaryButton": {
      "text": "Default Learn More",
      "action": "/features"
    }
  }
}
```

## Summary of i18n Pattern

By following this pattern:

*   Components fetch translations using a base key and item index (where applicable).
*   `pageSections.json` provides default text content (including `tag`, `title`, `description`, `image.alt`, item text), making it readable and serving as a fallback.
*   `messages/[locale].json` contains the actual translations, keyed appropriately.
*   Avoid using properties like `titleKey`, `descriptionKey`, or `translationSubKey` in `pageSections.json` for text that should be translated using this pattern. Pass the default text directly instead.

# Displaying Optional Tags

If a component accepts an optional `tag` string prop, it should be displayed using the `Badge` component from `@/components/ui/badge` when the `tag` is present.

Use the following structure:

```tsx
import { Badge } from "@/components/ui/badge";

// ... other component code

{tag && (
  <Badge
    variant="outline"
    className="inline-flex items-center gap-1 px-2.5 py-1.5 text-sm"
  >
    {tag}
  </Badge>
)}

// ... rest of the component
```

**Key points:**

*   Always check if `tag` exists (`{tag && ...}`) before rendering the `Badge`.
*   Use `variant="outline"`.
*   Use the specific `className="inline-flex items-center gap-1 px-2.5 py-1.5 text-sm"` for consistent styling and centering within text-aligned containers.
*   Ensure `Badge` is imported from `@/components/ui/badge`.
